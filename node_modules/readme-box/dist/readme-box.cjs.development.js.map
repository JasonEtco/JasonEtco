{"version":3,"file":"readme-box.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { request } from '@octokit/request'\n\nexport interface ReadmeBoxOpts {\n  owner: string\n  repo: string\n  token: string\n  branch?: string\n}\n\nexport interface UpdateSectionOpts extends ReadmeBoxOpts {\n  section: string\n  message?: string\n}\n\nexport interface ReplaceSectionOpts {\n  section: string\n  newContents: string\n  oldContents: string\n}\n\nexport class ReadmeBox {\n  public owner: string\n  public repo: string\n  public token: string\n  public branch: string\n  private request: typeof request\n\n  constructor(opts: ReadmeBoxOpts) {\n    this.owner = opts.owner\n    this.repo = opts.repo\n    this.token = opts.token\n    this.branch = opts.branch || 'master'\n\n    this.request = request.defaults({\n      headers: {\n        authorization: `token ${this.token}`\n      }\n    })\n  }\n\n  static async updateSection(newContents: string, opts: UpdateSectionOpts) {\n    const box = new ReadmeBox(opts)\n\n    // Get the README\n    const { content, sha, path } = await box.getReadme()\n\n    // Replace the old contents with the new\n    const replaced = box.replaceSection({\n      section: opts.section,\n      oldContents: content,\n      newContents\n    })\n\n    // Actually update the README\n    return box.updateReadme({\n      content: replaced,\n      message: opts.message,\n      sha,\n      path\n    })\n  }\n\n  async getReadme() {\n    const { data } = await this.request('GET /repos/:owner/:repo/readme', {\n      owner: this.owner,\n      repo: this.repo\n    })\n\n    // The API returns the blob as base64 encoded, we need to decode it\n    const encoded = data.content\n    const decoded = Buffer.from(encoded, 'base64').toString('utf8')\n\n    return {\n      content: decoded,\n      sha: data.sha,\n      path: data.path\n    }\n  }\n\n  async updateReadme(opts: {\n    content: string\n    sha: string\n    path?: string\n    message?: string\n  }) {\n    return this.request('PUT /repos/:owner/:repo/contents/:path', {\n      owner: this.owner,\n      repo: this.repo,\n      content: Buffer.from(opts.content).toString('base64'),\n      path: opts.path || 'README.md',\n      message: opts.message || 'Updating the README!',\n      sha: opts.sha,\n      branch: 'master'\n    })\n  }\n\n  getSection(section: string, content: string) {\n    const { regex } = this.createRegExp(section)\n    const match = content.match(regex)\n    return match?.groups?.content\n  }\n\n  replaceSection(opts: ReplaceSectionOpts) {\n    const { regex, start, end } = this.createRegExp(opts.section)\n\n    if (!regex.test(opts.oldContents)) {\n      throw new Error(\n        `Contents do not contain start/end comments for section \"${opts.section}\"`\n      )\n    }\n\n    const newContentsWithComments = `${start}\\n${opts.newContents}\\n${end}`\n    return opts.oldContents.replace(regex, newContentsWithComments)\n  }\n\n  private createRegExp(section: string) {\n    const start = `<!--START_SECTION:${section}-->`\n    const end = `<!--END_SECTION:${section}-->`\n    const regex = new RegExp(`${start}\\n(?<content>[\\\\s\\\\S]+)\\n${end}`)\n    return { regex, start, end }\n  }\n}\n"],"names":["ReadmeBox","opts","owner","repo","token","branch","request","defaults","headers","authorization","updateSection","newContents","box","getReadme","content","sha","path","replaced","replaceSection","section","oldContents","updateReadme","message","data","encoded","decoded","Buffer","from","toString","getSection","createRegExp","regex","match","groups","start","end","test","Error","newContentsWithComments","replace","RegExp"],"mappings":"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"}